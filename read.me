Предварительно
Пожалуйста, работайте над заданием прямо в документе. Опечатки, небольшие логические ошибки учитываться не будут. В нашем случае мы хотим увидеть ваш подход.
Вы можете что-то не успеть - это нормально. Лучше начинать с примитивного решения, которое работает, если есть сомнения, т.к. решить неэффективным способом лучше чем не решить.
У вас есть 60 минут.

Для удобства предлагается предварительно отключить автоформатирование / автоисправление в Google документе:
Tools (Инструменты) -> Preferences (Настройки) -> Убрать все галочки
Задание. Выбор товаров для приобретения
Контекст.
Торговая компания планирует автоматизировать процесс закупки товаров.
У компании есть 1000 денежных единиц на выполнение закупки в день. Деньги, которые мы не потратили в один день, на второй день не переходят.
Все товары в одном экземпляре.
    
Задача.
Определить набор товаров максимизирующий ценность. Выбор изолированный - различные варианты дней представлены только для того, чтобы вы реализовали абстрактный код.

Обращаем ваше внимание, что greedy algorithm деления стоимости на ценность с последующей сортировкой не дает корректный результат! Также не работает и простая сортировка по ценности. Вы работаете в NP-полной задачей!
Проще всего достичь результата полным перебором всех вариантов с выбором оптимального.
Также, для простоты можете считать, что в день не бывает более 10 товаров на выбор.

День 1.
Входные данные:
Товар 1. Ценность: 3. Стоимость: 200
Товар 2. Ценность: 33. Стоимость: 100
Товар 3. Ценность: 100. Стоимость: 250
Товар 4. Ценность: 10. Стоимость: 500
Товар 5. Ценность: 90. Стоимость: 125
Выходные данные (порядок не имеет значения):
Товар 5, Товар 3, Товар 2, Товар 4
Объяснение:
Сумма ценности будет 33+100+10+90=233. Никакая другая комбинация не позволяет достичь такой ценности при учете ограничения в 1000 денежных единиц.

День 2.
Входные данные:
Товар 1. Ценность: 2. Стоимость: 1
Товар 2. Ценность: 1000. Стоимость: 1000
Выходные данные (порядок не имеет значения):
Товар 2
Объяснение:
Взять 2 товара мы не можем, так как их суммарная стоимость будет больше лимита.

День 3.
Входные данные:
Товар 1. Ценность: 99. Стоимость: 1000
Товар 2. Ценность: 95. Стоимость: 100
Товар 3. Ценность: 85. Стоимость: 400
Товар 4. Ценность: 15. Стоимость: 500
Выходные (порядок не имеет значения):
Товар 2, Товар 3, Товар 4

Для реализации можно использовать PHP или NodeJS. Чем ниже вычислительная сложность - тем лучше, но принимается и рабочий brute-force результат.

На следующих страницах есть заготовки под оба языка.
PHP

$day1Products = [
    ["name" => "1", "value" => 3, "cost" => 200],
    ["name" => "2", "value" => 33, "cost" => 100],
    ["name" => "3", "value" => 100, "cost" => 250],
    ["name" => "4", "value" => 10, "cost" => 500],
    ["name" => "5", "value" => 90, "cost" => 125],
];
$day2Products = [
    ["name" => "1", "value" => 2, "cost" => 1],
    ["name" => "2", "value" => 1000, "cost" => 1000],
];
$day3Products = [
    ["name" => "1", "value" => 99, "cost" => 1000],
    ["name" => "2", "value" => 95, "cost" => 100],
    ["name" => "3", "value" => 85, "cost" => 400],
    ["name" => "4", "value" => 15, "cost" => 500],
];

function maximizeValue($products, $money = 1000) {
    // пишите код тут
}

NodeJS

const day1Products = [
    {name: "1", value: 3, cost: 200},
    {name: "2", value: 33, cost: 100},
    {name: "3", value: 100, cost: 250},
    {name: "4", value: 10, cost: 500},
    {name: "5", value: 90, cost: 125},
];
const day2Products = [
    {name: "1", value: 2, cost: 1},
    {name: "2", value: 1000, cost: 1000},
];
const day3Products = [
    {name: "1", value: 99, cost: 1000},
    {name: "2", value: 95, cost: 100},
    {name: "3", value: 85, cost: 400},
    {name: "4", value: 15, cost: 500},
];

function maximize(products, money = 1000) {
    // пишите код тут
}


